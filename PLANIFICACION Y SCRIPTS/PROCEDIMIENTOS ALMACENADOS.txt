SCRIPT PROCEDIMIENTOS ALMACENADOS

-- 1. Procedimiento Almacenado para Crear Usuario (APROBADO)

DELIMITER //
CREATE PROCEDURE CrearUsuario(
    IN p_username VARCHAR(255),
    IN p_email VARCHAR(255),
    IN p_password VARCHAR(255),
    IN p_nombres VARCHAR(255),
    IN p_apellidos VARCHAR(255)
)
BEGIN
    INSERT INTO Usuarios (username, email, password, registration_date, nombre, apellido)
    VALUES (p_username, p_email, p_password, NOW(), p_nombres, p_apellidos);
END //


-- 2. Procedimiento Almacenado para Iniciar Sesión (APROBADO)

CREATE PROCEDURE LoginUsuario(
    IN p_username VARCHAR(255),
    IN p_password VARCHAR(255),
    OUT p_LoginExitoso BIT
)
BEGIN
    -- Inicializar la variable de salida
    SET p_LoginExitoso = 0;

    -- Verificar si las credenciales son válidas
    IF EXISTS (
        SELECT 1
        FROM Usuarios
        WHERE username = p_username AND password = p_password AND estado = 'A'
    ) THEN
        -- Las credenciales son válidas
        SET p_LoginExitoso = 1;
    END IF;
END;


-- 3. Procedimiento Almacenado para Publicar Mensaje
CREATE PROCEDURE PublicarMensaje(
    IN p_user_id INT,
    IN p_content TEXT
)
BEGIN
    INSERT INTO Mensajes (user_id, content, publish_date)
    VALUES (p_user_id, p_content, NOW());
END //

-- 4. Procedimiento Almacenado para Agregar Amigo
CREATE PROCEDURE AgregarAmigo(
    IN p_user_id INT,
    IN p_friend_id INT
)
BEGIN
    INSERT INTO Amigos (user_id, friend_id)
    VALUES (p_user_id, p_friend_id);
    INSERT INTO Amigos (user_id, friend_id)
    VALUES (p_friend_id, p_user_id); -- Considerando una relación bidireccional
END //

-- 5. Procedimiento Almacenado para Enviar Solicitud de Amistad
CREATE PROCEDURE EnviarSolicitudAmistad(
    IN p_sender_id INT,
    IN p_receiver_id INT
)
BEGIN
    INSERT INTO Solicitudes_Amistad (sender_id, receiver_id, status)
    VALUES (p_sender_id, p_receiver_id, 'pendiente');
END //

-------------------------------------------------------------
DELIMITER //

CREATE PROCEDURE EnviarSolicitudAmistad(
    IN p_sender_id INT,
    IN p_receiver_id INT
)
BEGIN
    -- Insertar la solicitud de amistad con estado 'pendiente'
    INSERT INTO Solicitudes_Amistad (sender_id, receiver_id, status)
    VALUES (p_sender_id, p_receiver_id, 'pendiente');
END //

DELIMITER ;

////////////////////////////////

DELIMITER //

CREATE PROCEDURE AceptarSolicitudAmistad(
    IN p_request_id INT
)
BEGIN
    DECLARE sender_user_id INT;
    DECLARE receiver_user_id INT;

    -- Obtener el sender_id y receiver_id de la solicitud
    SELECT sender_id, receiver_id
    INTO sender_user_id, receiver_user_id
    FROM Solicitudes_Amistad
    WHERE request_id = p_request_id;

    -- Actualizar el estado de la solicitud a 'aceptado'
    UPDATE Solicitudes_Amistad
    SET status = 'aceptado'
    WHERE request_id = p_request_id;

    -- Insertar la relación de amistad en la tabla Amigos
    INSERT INTO Amigos (user_id, friend_id)
    VALUES (sender_user_id, receiver_user_id);

    -- Puedes agregar la inversa también si quieres (opcional)
    -- INSERT INTO Amigos (user_id, friend_id)
    -- VALUES (receiver_user_id, sender_user_id);
END //

DELIMITER ;

-------------------------------------------------------------

-- 6. Procedimiento Almacenado para Comentar Mensaje
CREATE PROCEDURE ComentarMensaje(
    IN p_message_id INT,
    IN p_user_id INT,
    IN p_content TEXT
)
BEGIN
    INSERT INTO Comentarios (message_id, user_id, content, comment_date)
    VALUES (p_message_id, p_user_id, p_content, NOW());
END //

-- 7. Procedimiento Almacenado para Obtener Mensajes del Foro
CREATE PROCEDURE ObtenerMensajesForo()
BEGIN
    SELECT * FROM Mensajes;
END //

-- 8. Procedimiento Almacenado para Obtener Mensajes de un Usuario
CREATE PROCEDURE ObtenerMensajesUsuario(
    IN p_user_id INT
)
BEGIN
    SELECT *
    FROM Mensajes
    WHERE user_id = p_user_id;
END //
